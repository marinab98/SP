#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

struct _element;
typedef struct _element * Position;
typedef struct _element {
    int value;

    Position left;
    Position right;
}
Element;

Position InitElement(int value);
Position FindElement(Position Tree, int value);
Position FindParent(Position Tree, Position Child);
Position FindMinElement(Position StartingElement);

int DeleteChildFromParent(Position Tree, Position Child);
Position InsertRecursively(Position CurrentElement, Position TargetElement);
Position DeleteElement(Position Tree, Position TargetElement);
int PreOrder(Position Tree);

void ClearTree(Position Tree);

void PrintMenu();

int main() {

    Position Tree = NULL; 
    char c; 
    int ElementValue; 

    PrintMenu();

    do {
        c = getchar();

        switch (c) {
        case '1':
          

            printf("Enter element value: ");
            scanf("%d", & ElementValue);
            Position NewElement = InitElement(ElementValue);

            
            if (NewElement == NULL)
                continue;

            // Ubacivanje elementa.
            Tree = InsertRecursively(Tree, NewElement);

            break;
        case '2':
            // Ispisivanje stabla.
            PreOrder(Tree);

            printf("\n");

            break;       
        case '3':
            // Pronalaženje elementa.

            printf("Enter value: ");
            scanf("%d", & ElementValue);

            if (NULL == Tree)
                // Nema elemenata za tražiti...
                continue;

            Position TargetElement = FindElement(Tree, ElementValue);

            if (TargetElement == NULL)
                continue;

            if (TargetElement->value != ElementValue) {
                printf("Element not found!");
                continue;
            }

            printf("\t Adresa elementa: %p\n", TargetElement);
            break;

        case '4':
            // Brisanje elementa.

            if (NULL == Tree)
                // Nema elemenata za brisati...
                continue;

            printf("Unesi element: ");
            scanf("%d", &ElementValue);
            // Pronalaženje elementa.
            Position ElementToDelete = FindElement(Tree, ElementValue)
            if (ElementToDelete == NULL)
                continue;
                
            
            Tree = DeleteElement(Tree, ElementToDelete);

            break;
        }
    
    } while (c != '5');

    ClearTree(Tree);

    return 0;
}

void ClearTree(Position Tree){

    if (NULL == Tree)
        return;

    ClearTree(Tree->left);
    ClearTree(Tree->right);

    printf("\t Clearing %d...\n", Tree->value);

    free(Tree);
}

Position DeleteElement(Position Tree, Position TargetElement) {
    if (NULL == Tree)
        return Tree;

    if (Tree->value > TargetElement->value)
        Tree->left = DeleteElement(Tree->left, TargetElement);
    else if (Tree->value < TargetElement->value)
        Tree->right = DeleteElement(Tree->right, TargetElement);
    else {
      
        if (Tree->left != NULL && Tree->right != NULL) {
           
            Position MinElement = FindMinElement(Tree->right);

            Tree->value = MinElement->value;

            Tree->right = DeleteElement(Tree->right, MinElement);
        }
        else {
            Position Temp = Tree;

            if (Tree->left == NULL)
                Tree = Tree->right;
            else
                Tree = Tree->left;

            free(Temp);
        }
    }
   
    return Tree;
}

Position FindMinElement(Position StartingElement) {
 

    if (StartingElement->left == NULL)
        return StartingElement;

    FindMinElement(StartingElement->left);    
}

Position FindElement(Position Tree, int value) {
    

    if (Tree == NULL)
        return NULL;
 
    else if (Tree->value == value)
        return Tree;
   
    else if (Tree->value > value)
        FindElement(Tree->left, value);
    
    else
        FindElement(Tree->right, value);
}

int PreOrder(Position Tree) {

    if (Tree != NULL) {
        printf("%d ", Tree->value);
        PreOrder(Tree->left);
        PreOrder(Tree->right);
    } 
    else
        return 0;
}

Position InsertRecursively(Position CurrentElement, Position TargetElement) {

    if (CurrentElement == NULL)
   
        return TargetElement;
    else if (CurrentElement->value < TargetElement->value)
        
        CurrentElement->right = InsertRecursively(CurrentElement->right, TargetElement);
    else if (CurrentElement->value > TargetElement->value)
        
        CurrentElement->left = InsertRecursively(CurrentElement->left, TargetElement);
    else 
      
        printf("\t Element already exists!\n");

    return CurrentElement;
}

void PrintMenu() {
    printf("1) Unesite element\n");
    printf("2) Ispis\n");
    printf("3) Pronađi element\n");
    printf("4) Briši element\n");
    printf("5) Izlaz\n");
}

Position InitElement(int value) {

    Position NewElement = NULL;

    NewElement = (Position) malloc(sizeof(Element));

    if (NULL == NewElement) {
        printf("\t malloc failed @ InitElement!\n");
        return NULL;
    }

    NewElement->value = value;
    NewElement->left = NULL;
    NewElement->right = NULL;

    return NewElement;
}
